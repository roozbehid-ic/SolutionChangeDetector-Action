name: Solution Dependency Check
description: Analyze visual studio (.sln) file and all projects within it and give list of all dependency folders
author: Roozbeh Gh.

branding:
  icon: 'user-x'
  color: 'purple'

inputs:
  solution_path:
    description: 'Path to the .sln file'
    required: true
    type: string
  repo_path:
    description: 'Path to repository, if not provided will use default'
    required: false
    type: string
    default: ${{ github.workspace }}
  operation_mode:
    description: 'Modes of operation : external_git, internal_git, combined_git, file'
    required: false
    type: string
    default: internal_git
  git_id_path_filepath:
    description: 'Points to a file having format of %(objectname),%(path) from git'
    required: false
    type: string
  binary_folder_path:
    description: 'Path where RoozSoft.SolutionDependencyAnalyzer package could be found. Under this directory should be lib and runtimes folders exist'
    reqired: false
    type: string


outputs:
  dependency_list:
    description: "Dependency list"
    value: ${{ steps.analyze_dependencies.outputs.dependency_list }}


runs:
    using: "composite"
    
    steps:
      - name: Run Dependency Analyzer
        shell: pwsh
        id: analyze_dependencies
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $installed = install-package -Name RoozSoft.SolutionDependencyAnalyzer-nodep -Scope CurrentUser -Destination . -SkipDependencies -Source https://api.nuget.org/v3/index.json -force

          $pkgroot = "$($installed.Name).$($installed.Version)"
          $pkgroot_lib = "$pkgroot/lib/net$([System.Environment]::Version.Major).0"

          $info = dotnet --info
          $platform = ($info | Select-String '^\s*OS Platform:\s+(\w+)$')[0].Matches.Groups[1].Value -replace 'windows', 'win'
          $architecture = ($info | Select-String '^\s*Architecture:\s+(\w+)$')[0].Matches.Groups[1].Value                          
          $runtime = "${platform}-${architecture}".ToLower()
          
          Copy-Item $pkgroot/runtimes/$runtime/native/*.*   $pkgroot_lib
          $loaded = [System.Reflection.Assembly]::LoadFrom("$pkgroot_lib/RoozSoft.SolutionDependencyAnalyzer.dll")

          $operation_mode = "${{ inputs.operation_mode }}"
          $git_id_path_file = "${{ inputs.git_id_path_filepath }}"

          $repo = switch ($operation_mode ) {
           external_git {
            New-Object RoozSoft.SolutionDependencyAnalyzer.ExternalGitRepository("${{ inputs.repo_path }}")
           }
           internal_git {
            New-Object RoozSoft.SolutionDependencyAnalyzer.InternalGitRepository("${{ inputs.repo_path }}",$git_id_path_file)
           }
           file {
            New-Object RoozSoft.SolutionDependencyAnalyzer.FileSystemRepository("${{ inputs.repo_path }}")
           }
           combined_git {
            $tmpFile = New-TemporaryFile
            git ls-tree --format "%(objectname),%(path)" -r HEAD | Out-File $tmpFile
            New-Object RoozSoft.SolutionDependencyAnalyzer.InternalGitRepository("${{ inputs.repo_path }}",$tmpFile)
           }
           default {
            New-Object RoozSoft.SolutionDependencyAnalyzer.InternalGitRepository("${{ inputs.repo_path }}",$git_id_path_file)
           }
          }

          $SlnAnalyzer = New-Object RoozSoft.SolutionDependencyAnalyzer.SolutionDependencyAnalyzer($repo)
          $result = $SlnAnalyzer.GetDependencyList("${{ inputs.solution_path }}")
          
          echo "dependency_list<<EOF`n$result`nEOF" 

          echo "dependency_list<<EOF`n$result`nEOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
        
